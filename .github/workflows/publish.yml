name: Update Engine JSON

on:
  workflow_dispatch:
  schedule:
    - cron: 0 0 * * 2

jobs:
  update-json:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Update JSON file
      run: |
        # Read the current JSON file
        if [ -f "deployment/engine.json" ]; then
          # Use jq to update the updatedAt property
          jq '.updatedAt = "2025-08-04 23:00"' deployment/engine.json > deployment/engine.json.tmp
          mv deployment/engine.json.tmp deployment/engine.json
        else
          echo "Error: deployment/engine.json not found"
          exit 1
        fi
    
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add deployment/engine.json
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-update engine.json updatedAt to 2025-08-04 23:00"
          git push
        fi
    
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v2.2"
        release_name: "v2.2"
        body: |
          ### ðŸ‘€ Overview
          This new update launches with complete restructuring of engine data, independence of third-party tools, provides quality-of-life changes, and does some other stuff.

          ### âœ¨ Engine
          - Restructures the engine files, branching out several portions of the code into new files, (e.g., utils.js, manager.js, motion.js)
          - Adds a completely new toast system with a color scheme that matches Zen.
          - Adds a new updating system that displays the latest version as well as your current version. It also separates the check for updates button from the install updates button and the restart to apply changes button.
          - Fixes the requirement of a double-click for toast buttons to work.
          - Replaces all instances of ```UC_API.Prefs``` with ```Services.prefs``` solutions.
          - Implements a ```uc_api.js``` system for Sine so that it has its own utils for functions it uses.
          - Removes the ```UC_API.SharedStorage``` usage and replaces it with a direct usage of the fetch object from the global window.
          - Removes the unnecessary "Enable for this mod" option from the ```handleJS``` function.
          - Prevents a failure to parse mod JSON from completely crashing Sine, making removal/reinstallation of such mod much easier.
          - Fixes attempted installing of ```moz-icon://``` prefix with CSS url parsing.
          - Fixes Zen Mods not being able to be removed properly (i.e., the remove mod button would gray out.)
          - Allows embedded chrome documents to have styles injected like normal userChrome behavior (e.g., the bookmarks sidebar.)
          - Adds the MPL license to JSWindowActors to provide the appropriate licensing and credit for the files.
          - Changes window actor name in JSWindowActors to prevent conflict with Zen's built-in actors.

          ### âœ¨ Auto-installer
          - Fixes the permissions issue on Linux.
          - No longer installs unnecessary fx-autoconfig files.
          - Now adds the current and latest version prefs to the corresponding profile.
          - Fixes all the warnings when compiling.
          - Changes the compiler so that it compiles for multiple targets at once.
          - Corrects Floorp installation path for Linux.

          ### â›” Missing features
          If you were expecting one of these features, I'm sorry but due to a lot of thought behind the implementation and a lack of time, they didn't make this update, but they will be given top-priority in v2.3.

          - Librewolf support.
          - A way to create mods without a github repo via the developer command palette.
          - Multi-file JS support and no requirement of restarting the browser to apply JS mods.

          If you were promised something that wasn't on this list, please notify me of it in the Discord server. I'm also aiming to get my tasks in order so stuff like this doesn't happen.
        draft: false
        prerelease: false
    
    - name: Download binaries from separate repo
      run: |
        # Create a directory for binaries
        mkdir -p ./temp-binaries
        
        # Download binaries from your separate repository
        # Replace 'your-username/your-binaries-repo' with your actual repo
        BINARIES_REPO="sineorg/binaries"
        
        # Download Linux binaries
        curl -L -o ./temp-binaries/sine-linux-arm64 \
          "https://github.com/${BINARIES_REPO}/raw/main/sine-linux-arm64"
        curl -L -o ./temp-binaries/sine-linux-musl-arm64 \
          "https://github.com/${BINARIES_REPO}/raw/main/sine-linux-musl-arm64"
        curl -L -o ./temp-binaries/sine-linux-musl-x64 \
          "https://github.com/${BINARIES_REPO}/raw/main/sine-linux-musl-x64"
        curl -L -o ./temp-binaries/sine-linux-x64 \
          "https://github.com/${BINARIES_REPO}/raw/main/sine-linux-x64"
        
        # Download macOS binaries
        curl -L -o ./temp-binaries/sine-osx-arm64 \
          "https://github.com/${BINARIES_REPO}/raw/main/sine-osx-arm64"
        curl -L -o ./temp-binaries/sine-osx-x64 \
          "https://github.com/${BINARIES_REPO}/raw/main/sine-osx-x64"
        
        # Download Windows binaries
        curl -L -o ./temp-binaries/sine-win-arm64.exe \
          "https://github.com/${BINARIES_REPO}/raw/main/sine-win-arm64.exe"
        curl -L -o ./temp-binaries/sine-win-x64.exe \
          "https://github.com/${BINARIES_REPO}/raw/main/sine-win-x64.exe"
        
        # Make non-Windows binaries executable
        chmod +x ./temp-binaries/sine-linux-arm64
        chmod +x ./temp-binaries/sine-linux-musl-arm64
        chmod +x ./temp-binaries/sine-linux-musl-x64
        chmod +x ./temp-binaries/sine-linux-x64
        chmod +x ./temp-binaries/sine-osx-arm64
        chmod +x ./temp-binaries/sine-osx-x64
    
    - name: Upload Linux ARM64 Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./temp-binaries/sine-linux-arm64
        asset_name: sine-linux-arm64
        asset_content_type: application/octet-stream
    
    - name: Upload Linux ARM64 (musl) Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./temp-binaries/sine-linux-musl-arm64
        asset_name: sine-linux-musl-arm64
        asset_content_type: application/octet-stream
    
    - name: Upload Linux x64 (musl) Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./temp-binaries/sine-linux-musl-x64
        asset_name: sine-linux-musl-x64
        asset_content_type: application/octet-stream
    
    - name: Upload Linux x64 Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./temp-binaries/sine-linux-x64
        asset_name: sine-linux-x64
        asset_content_type: application/octet-stream
    
    - name: Upload macOS ARM64 Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./temp-binaries/sine-osx-arm64
        asset_name: sine-osx-arm64
        asset_content_type: application/octet-stream
    
    - name: Upload macOS x64 Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./temp-binaries/sine-osx-x64
        asset_name: sine-osx-x64
        asset_content_type: application/octet-stream
    
    - name: Upload Windows ARM64 Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./temp-binaries/sine-win-arm64.exe
        asset_name: sine-win-arm64.exe
        asset_content_type: application/octet-stream
    
    - name: Upload Windows x64 Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./temp-binaries/sine-win-x64.exe
        asset_name: sine-win-x64.exe
        asset_content_type: application/octet-stream
